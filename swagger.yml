swagger: "2.0"
info:
  description: "Kazan hackathon API"
  version: "0.3.0"
  title: "Kazan API"
host: "localhost:8080"
basePath: "/api/"
schemes:
  - "http"
tags:
  - name: order
    description: Food order
#  - name: user
#    description: User information
  - name: ticket
    description: Ticket
  - name: route
    description: Railroad route
#- name: cafe
#  description: Cafe, restoraunt, etc.

paths:
  /order/{id}:
    get:
      tags:
        - order
      summary: "get order"
      produces:
        - "application/json"
      parameters:
        - in: path
          name: id
          required: true
          type: string
          description: The order ID.
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/OrderResponse"
        400:
          description: Bad request
          schema:
            $ref: "#/definitions/StatusResponse"
        404:
          description: Not found
          schema:
            $ref: "#/definitions/StatusResponse"
        500:
          description: Internal server error
          schema:
            $ref: "#/definitions/StatusResponse"

    delete:
      tags:
        - order
      summary: "cancel order"
      produces:
        - "application/json"
      parameters:
        - in: path
          name: id
          required: true
          type: string
          description: The order ID.
      responses:
        202:
          description: Canceled
          schema:
            $ref: "#/definitions/StatusResponse"
        400:
          description: Bad request
          schema:
            $ref: "#/definitions/StatusResponse"
        404:
          description: Not found
          schema:
            $ref: "#/definitions/StatusResponse"
        500:
          description: Internal server error
          schema:
            $ref: "#/definitions/StatusResponse"

  /order:
    post:
      tags:
        - order
      summary: "create order"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: body
          description: "The GitHub API url to call"
          required: true
          in: body
          schema:
            $ref: "#/definitions/OrderRequest"
      responses:
        201:
          description: Created
          schema:
            $ref: "#/definitions/OrderCreateResponse"
        400:
          description: Bad request
          schema:
            $ref: "#/definitions/StatusResponse"
        500:
          description: Internal server error
          schema:
            $ref: "#/definitions/StatusResponse"

  /ticket/{id}/route:
    get:
      tags:
        - route
        - ticket
      summary: "get route by ticket number"
      produces:
        - "application/json"
      parameters:
        - in: path
          name: id
          required: true
          type: string
          description: The ticket ID
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/RouteResponse"
        400:
          description: Bad request
          schema:
            $ref: "#/definitions/StatusResponse"
        404:
          description: Not found
          schema:
            $ref: "#/definitions/StatusResponse"
        500:
          description: Internal server error
          schema:
            $ref: "#/definitions/StatusResponse"


definitions:
  OrderResponse:
    type: object
    required:
      - id
      - status
      - positions
    properties:
      id:
        type: string
      status:
        type: string
      positions:
        type: array
        items:
          $ref: "#/definitions/OrderItem"

  OrderCreateResponse:
    type: object
    required:
      - id
      - payment_url
      - status
      - positions
    properties:
      id:
        type: string
      payment_url:
        type: string
      status:
        type: string
      positions:
        type: array
        items:
          $ref: "#/definitions/OrderItem"


  OrderRequest:
    type: object
    required:
      - user_id
      - order
    properties:
      user_id:
        type: string
      order:
        type: object
        required:
          - cafe_id
          - positions
        properties:
          cafe_id:
            type: string
          positions:
            type: array
            items:
              $ref: "#/definitions/OrderItem"

  OrderItem:
    type: object
    required:
      - id
      - amount
    properties:
      id:
        type: string
      amount:
        type: integer

  RouteResponse:
    type: object
    required:
      - train_number
      - stops
    properties:
      train_number:
        type: string
      stops:
        type: array
        items:
          type: object
          required:
            - city_id
            - name
            - date_time
            - duration
            - cafes
          properties:
            city_id:
              type: string
            name:
              type: string
            date_time:
              type: string
              format: date-time
            duration:
              type: integer
            cafes:
              type: array
              items:
                $ref: "#/definitions/CafeResponse"

  CafeResponse:
    type: object
    required:
      - id
      - name
      - city_id
      - positions
    properties:
      id:
        type: string
      name:
        type: string
      city_id:
        type: string
      positions:
        type: array
        items:
          $ref: "#/definitions/CafeDishResponse"

  CafeDishResponse:
    type: object
    required:
      - id
      - name
      - price
      - image_url
    properties:
      id:
        type: string
      name:
        type: string
      price:
        type: integer
      image_url:
        type: string

  StatusResponse:
    type: object
    properties:
      message:
        type: string
