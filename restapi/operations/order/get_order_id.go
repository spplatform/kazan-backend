// Code generated by go-swagger; DO NOT EDIT.

package order

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetOrderIDHandlerFunc turns a function with the right signature into a get order ID handler
type GetOrderIDHandlerFunc func(GetOrderIDParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetOrderIDHandlerFunc) Handle(params GetOrderIDParams) middleware.Responder {
	return fn(params)
}

// GetOrderIDHandler interface for that can handle valid get order ID params
type GetOrderIDHandler interface {
	Handle(GetOrderIDParams) middleware.Responder
}

// NewGetOrderID creates a new http.Handler for the get order ID operation
func NewGetOrderID(ctx *middleware.Context, handler GetOrderIDHandler) *GetOrderID {
	return &GetOrderID{Context: ctx, Handler: handler}
}

/*GetOrderID swagger:route GET /order/{id} order getOrderId

get order

*/
type GetOrderID struct {
	Context *middleware.Context
	Handler GetOrderIDHandler
}

func (o *GetOrderID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetOrderIDParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
