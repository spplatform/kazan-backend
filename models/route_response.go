// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RouteResponse route response
// swagger:model RouteResponse
type RouteResponse struct {

	// stops
	// Required: true
	Stops []*RouteResponseStopsItems0 `json:"stops"`

	// train name
	TrainName string `json:"train_name,omitempty"`

	// train number
	// Required: true
	TrainNumber *string `json:"train_number"`
}

// Validate validates this route response
func (m *RouteResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStops(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTrainNumber(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RouteResponse) validateStops(formats strfmt.Registry) error {

	if err := validate.Required("stops", "body", m.Stops); err != nil {
		return err
	}

	for i := 0; i < len(m.Stops); i++ {
		if swag.IsZero(m.Stops[i]) { // not required
			continue
		}

		if m.Stops[i] != nil {
			if err := m.Stops[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("stops" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RouteResponse) validateTrainNumber(formats strfmt.Registry) error {

	if err := validate.Required("train_number", "body", m.TrainNumber); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RouteResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RouteResponse) UnmarshalBinary(b []byte) error {
	var res RouteResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// RouteResponseStopsItems0 route response stops items0
// swagger:model RouteResponseStopsItems0
type RouteResponseStopsItems0 struct {

	// cafes
	// Required: true
	Cafes []*CafeResponse `json:"cafes"`

	// city id
	// Required: true
	CityID *string `json:"city_id"`

	// date time
	// Required: true
	// Format: date-time
	DateTime *strfmt.DateTime `json:"date_time"`

	// duration
	// Required: true
	Duration *int64 `json:"duration"`

	// name
	// Required: true
	Name *string `json:"name"`
}

// Validate validates this route response stops items0
func (m *RouteResponseStopsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCafes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCityID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDuration(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RouteResponseStopsItems0) validateCafes(formats strfmt.Registry) error {

	if err := validate.Required("cafes", "body", m.Cafes); err != nil {
		return err
	}

	for i := 0; i < len(m.Cafes); i++ {
		if swag.IsZero(m.Cafes[i]) { // not required
			continue
		}

		if m.Cafes[i] != nil {
			if err := m.Cafes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("cafes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RouteResponseStopsItems0) validateCityID(formats strfmt.Registry) error {

	if err := validate.Required("city_id", "body", m.CityID); err != nil {
		return err
	}

	return nil
}

func (m *RouteResponseStopsItems0) validateDateTime(formats strfmt.Registry) error {

	if err := validate.Required("date_time", "body", m.DateTime); err != nil {
		return err
	}

	if err := validate.FormatOf("date_time", "body", "date-time", m.DateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *RouteResponseStopsItems0) validateDuration(formats strfmt.Registry) error {

	if err := validate.Required("duration", "body", m.Duration); err != nil {
		return err
	}

	return nil
}

func (m *RouteResponseStopsItems0) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RouteResponseStopsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RouteResponseStopsItems0) UnmarshalBinary(b []byte) error {
	var res RouteResponseStopsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
